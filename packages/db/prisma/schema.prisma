// /packages/db/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  username    String   @unique
  phoneNumber String?  @unique
  password    String
  isAdmin     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  orders      Order[]
  // reviews     Review[]

  Wishlist Wishlist[]

  Payment Payment[]
}

model Product {
  id              Int       @id @default(autoincrement())
  title           String
  description     String
  price           Float
  discountedPrice Float
  images          String[]
  category        Category? @relation(fields: [categoryId], references: [id])
  categoryId      Int?
  // type            ProductType
  createdAt       DateTime  @default(now())
  // reviews         Review[]
  game            Game?
  giftCard        GiftCard?
  book            Book?

  Wishlist Wishlist[]

  Order Order[]
}

model Game {
  id          Int     @id @default(autoincrement())
  productId   Int     @unique
  product     Product @relation(fields: [productId], references: [id])
  platform    String  // e.g., "PC", "Xbox", etc.
  genre       String  // e.g., "Action", "Adventure", etc.
  releaseDate DateTime
  // stock           Int
}

model GiftCard {
  id          Int     @id @default(autoincrement())
  productId   Int     @unique
  product     Product @relation(fields: [productId], references: [id])
  code        String  // e.g., "XYS12345"
  value       Float
  expiration  DateTime
  // stock           Int
}

model Book {
  id          Int     @id @default(autoincrement())
  productId   Int     @unique
  product     Product @relation(fields: [productId], references: [id])
  author      String  // e.g., "J.K. Rowling"
  genre       String  // e.g., "Fantasy"
  isbn        String  // ISBN number
  pages       Int     // Number of pages
  language    String  // e.g., "English"
  // stock           Int
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  products  Product[]
  image     String
}

enum OrderStatus {
  cart
  paid
  disbursed
  cancelled
}

model Order {
  id          Int        @id @default(autoincrement())
  userId      Int
  quantity    Int
  productId   Int
  product     Product    @relation(fields: [productId], references: [id])
  status      OrderStatus @default(cart)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  user        User       @relation(fields: [userId], references: [id])
  paymentId   Int?       // Foreign key to Payment
  payment     Payment?   @relation(fields: [paymentId], references: [id]) // 1-to-1 relation

}
model Wishlist {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  createdAt DateTime @default(now())

  @@unique([userId, productId])
}

enum PaymentStatus {
  pending
  completed
  failed
}

model Payment {
  id             Int       @id @default(autoincrement())
  reference      String    @unique
  userId         Int
  amount         Float
  status         PaymentStatus @default(pending)
  paidAt         DateTime? // can be null until confirmed

  user           User      @relation(fields: [userId], references: [id])
  orders         Order[]   // 1-to-many relationship with Order

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}
